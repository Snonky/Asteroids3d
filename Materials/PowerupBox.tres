[gd_resource type="VisualShader" load_steps=9 format=2]

[ext_resource path="res://Texture/Powerup/Powerup Color.png" type="Texture" id=1]

[sub_resource type="VisualShaderNodeTexture" id=1]
texture = ExtResource( 1 )
texture_type = 1

[sub_resource type="OpenSimplexNoise" id=2]
seed = 9
octaves = 1
period = 99.1
persistence = 0.0

[sub_resource type="NoiseTexture" id=3]
noise = SubResource( 2 )

[sub_resource type="VisualShaderNodeTexture" id=4]
output_port_for_preview = 0
texture = SubResource( 3 )

[sub_resource type="VisualShaderNodeScalarFunc" id=5]
output_port_for_preview = 0
function = 15

[sub_resource type="VisualShaderNodeScalarOp" id=6]
operator = 2

[sub_resource type="VisualShaderNodeScalarUniform" id=7]
uniform_name = "Dissolve"

[resource]
code = "shader_type spatial;
render_mode depth_draw_always, specular_schlick_ggx;

uniform sampler2D tex_frg_2 : hint_albedo;
uniform sampler2D tex_frg_3;
uniform float Dissolve;



void vertex() {
// Output:0

}

void fragment() {
// Texture:2
	vec4 tex_frg_2_read = texture(tex_frg_2, UV.xy);
	vec3 n_out2p0 = tex_frg_2_read.rgb;
	float n_out2p1 = tex_frg_2_read.a;

// Texture:3
	vec4 tex_frg_3_read = texture(tex_frg_3, UV.xy);
	vec3 n_out3p0 = tex_frg_3_read.rgb;
	float n_out3p1 = tex_frg_3_read.a;

// ScalarUniform:6
	float n_out6p0 = Dissolve;

// ScalarOp:5
	float n_out5p0 = dot(n_out3p0, vec3(0.333333, 0.333333, 0.333333)) * n_out6p0;

// ScalarFunc:4
	float n_out4p0 = round(n_out5p0);

// Output:0
	ALBEDO = n_out2p0;
	ALPHA = n_out4p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -54, 167 )
modes/depth_draw = 1
nodes/fragment/0/position = Vector2( 400, 160 )
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( 0, 160 )
nodes/fragment/3/node = SubResource( 4 )
nodes/fragment/3/position = Vector2( -400, 200 )
nodes/fragment/4/node = SubResource( 5 )
nodes/fragment/4/position = Vector2( 180, 420 )
nodes/fragment/5/node = SubResource( 6 )
nodes/fragment/5/position = Vector2( -80, 460 )
nodes/fragment/6/node = SubResource( 7 )
nodes/fragment/6/position = Vector2( -380, 560 )
nodes/fragment/connections = PoolIntArray( 2, 0, 0, 0, 3, 0, 5, 0, 5, 0, 4, 0, 6, 0, 5, 1, 4, 0, 0, 1 )
