[gd_resource type="VisualShader" load_steps=39 format=2]

[sub_resource type="VisualShaderNodeExpression" id=1]
size = Vector2( 587, 415 )
expression = "vec2 markerVec = vec2(cos(MarkerAngle), sin(MarkerAngle));
vec2 viewVec = vec2(cos(ViewAngle), sin(ViewAngle));

float angle = acos(dot(markerVec, viewVec));

float compassAngle = 3.141593*CompassRange;
float edgeDisplayAngle = 3.141593*EdgeDisplayRange;
float fadeOutAngle = edgeDisplayAngle - compassAngle;

float outOfViewAngle = angle - compassAngle;
outOfViewAngle = clamp(outOfViewAngle, 0.0, fadeOutAngle);

if(outOfViewAngle > 0.0) {
	output0 = (1.0 - (outOfViewAngle / fadeOutAngle)) * 0.5;
} else {
	output0 = 1.0;
}

"

[sub_resource type="VisualShaderNodeTextureUniform" id=2]
uniform_name = "TextureUniform"
texture_type = 1

[sub_resource type="VisualShaderNodeScalarOp" id=3]
operator = 2

[sub_resource type="VisualShaderNodeVectorCompose" id=4]

[sub_resource type="VisualShaderNodeScalarFunc" id=5]
function = 1

[sub_resource type="VisualShaderNodeScalarFunc" id=6]
function = 0

[sub_resource type="VisualShaderNodeVectorCompose" id=7]

[sub_resource type="VisualShaderNodeDotProduct" id=8]

[sub_resource type="VisualShaderNodeScalarOp" id=9]
default_input_values = [ 0, 0.0, 1, -1150.0 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarFunc" id=10]
function = 0

[sub_resource type="VisualShaderNodeScalarFunc" id=11]
function = 1

[sub_resource type="VisualShaderNodeVectorCompose" id=12]

[sub_resource type="VisualShaderNodeScalarOp" id=13]
default_input_values = [ 0, 0.0, 1, -1.0 ]
operator = 2

[sub_resource type="VisualShaderNodeInput" id=14]
input_name = "vertex"

[sub_resource type="VisualShaderNodeDotProduct" id=15]

[sub_resource type="VisualShaderNodeScalarFunc" id=16]

[sub_resource type="VisualShaderNodeScalarFunc" id=17]
function = 4

[sub_resource type="VisualShaderNodeScalarOp" id=18]
default_input_values = [ 0, 0.0, 1, 200.0 ]
operator = 3

[sub_resource type="VisualShaderNodeScalarOp" id=19]
default_input_values = [ 0, 0.0, 1, 0.12 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=20]
operator = 2

[sub_resource type="VisualShaderNodeScalarClamp" id=21]

[sub_resource type="VisualShaderNodeScalarOp" id=22]
default_input_values = [ 0, 0.0, 1, 200.0 ]
operator = 1

[sub_resource type="VisualShaderNodeScalarOp" id=23]
default_input_values = [ 0, 0.0, 1, 200.0 ]
operator = 3

[sub_resource type="VisualShaderNodeVectorOp" id=24]

[sub_resource type="VisualShaderNodeScalarOp" id=25]
default_input_values = [ 0, 1.5708, 1, 200.0 ]
operator = 1

[sub_resource type="VisualShaderNodeScalarOp" id=26]
default_input_values = [ 0, 0.0, 1, 0.5 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarClamp" id=27]

[sub_resource type="VisualShaderNodeScalarUniform" id=28]
uniform_name = "CompassRange"

[sub_resource type="VisualShaderNodeScalarConstant" id=29]
constant = 3.14159

[sub_resource type="VisualShaderNodeScalarOp" id=30]
default_input_values = [ 0, 0.0, 1, -250.0 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=31]

[sub_resource type="VisualShaderNodeScalarOp" id=32]
operator = 2

[sub_resource type="VisualShaderNodeVectorCompose" id=33]

[sub_resource type="VisualShaderNodeScalarUniform" id=34]
uniform_name = "EdgeDisplayRange"

[sub_resource type="VisualShaderNodeScalarUniform" id=35]
uniform_name = "MarkerAngle"

[sub_resource type="VisualShaderNodeScalarUniform" id=36]
uniform_name = "ViewAngle"

[sub_resource type="VisualShaderNodeScalarFunc" id=37]
function = 1

[sub_resource type="VisualShaderNodeScalarFunc" id=38]
function = 0

[resource]
code = "shader_type canvas_item;
uniform float MarkerAngle;
uniform float ViewAngle;
uniform float CompassRange;
uniform float EdgeDisplayRange;
uniform sampler2D TextureUniform : hint_albedo;



void vertex() {
// Input:2
	vec3 n_out2p0 = vec3(VERTEX, 0.0);

// ScalarUniform:5
	float n_out5p0 = MarkerAngle;

// ScalarFunc:16
	float n_out16p0 = sin(n_out5p0);

// ScalarOp:19
	float n_in19p1 = -1.00000;
	float n_out19p0 = n_out16p0 * n_in19p1;

// ScalarFunc:17
	float n_out17p0 = cos(n_out5p0);

// VectorCompose:18
	float n_in18p2 = 0.00000;
	vec3 n_out18p0 = vec3(n_out19p0, n_out17p0, n_in18p2);

// ScalarUniform:6
	float n_out6p0 = ViewAngle;

// ScalarFunc:11
	float n_out11p0 = cos(n_out6p0);

// ScalarFunc:12
	float n_out12p0 = sin(n_out6p0);

// VectorCompose:13
	float n_in13p2 = 0.00000;
	vec3 n_out13p0 = vec3(n_out11p0, n_out12p0, n_in13p2);

// DotProduct:20
	float n_out20p0 = dot(n_out18p0, n_out13p0);

// ScalarFunc:21
	float n_out21p0 = sign(n_out20p0);

// ScalarFunc:8
	float n_out8p0 = cos(n_out5p0);

// ScalarFunc:9
	float n_out9p0 = sin(n_out5p0);

// VectorCompose:10
	float n_in10p2 = 0.00000;
	vec3 n_out10p0 = vec3(n_out8p0, n_out9p0, n_in10p2);

// DotProduct:14
	float n_out14p0 = dot(n_out10p0, n_out13p0);

// ScalarFunc:22
	float n_out22p0 = acos(n_out14p0);

// Scalar:36
	float n_out36p0 = 3.141590;

// ScalarUniform:35
	float n_out35p0 = CompassRange;

// ScalarOp:25
	float n_out25p0 = n_out36p0 * n_out35p0;

// ScalarOp:23
	float n_out23p0 = n_out22p0 / n_out25p0;

// ScalarClamp:27
	float n_in27p1 = 0.00000;
	float n_in27p2 = 1.00000;
	float n_out27p0 = clamp(n_out23p0, n_in27p1, n_in27p2);

// ScalarOp:26
	float n_out26p0 = n_out21p0 * n_out27p0;

// ScalarOp:15
	float n_in15p1 = -1150.00000;
	float n_out15p0 = n_out26p0 * n_in15p1;

// ScalarOp:28
	float n_out28p0 = n_out22p0 - n_out25p0;

// ScalarUniform:40
	float n_out40p0 = EdgeDisplayRange;

// ScalarOp:31
	float n_out31p0 = n_out36p0 * n_out40p0;

// ScalarOp:30
	float n_out30p0 = n_out31p0 - n_out25p0;

// ScalarClamp:32
	float n_in32p1 = 0.00000;
	float n_out32p0 = clamp(n_out28p0, n_in32p1, n_out30p0);

// ScalarOp:29
	float n_out29p0 = n_out32p0 / n_out30p0;

// ScalarOp:39
	float n_out39p0 = n_out21p0 * n_out29p0;

// ScalarOp:37
	float n_in37p1 = -250.00000;
	float n_out37p0 = n_out39p0 * n_in37p1;

// ScalarOp:38
	float n_out38p0 = n_out15p0 + n_out37p0;

// VectorCompose:4
	float n_in4p1 = 0.00000;
	float n_in4p2 = 0.00000;
	vec3 n_out4p0 = vec3(n_out38p0, n_in4p1, n_in4p2);

// VectorOp:3
	vec3 n_out3p0 = n_out2p0 + n_out4p0;

// Output:0
	VERTEX = n_out3p0.xy;

}

void fragment() {
// TextureUniform:4
	vec3 n_out4p0;
	float n_out4p1;
	{
		vec4 n_tex_read = texture(TextureUniform, UV.xy);
		n_out4p0 = n_tex_read.rgb;
		n_out4p1 = n_tex_read.a;
	}

// Expression:2
	float n_out2p0;
	n_out2p0 = 0.0;
	{
		vec2 markerVec = vec2(cos(MarkerAngle), sin(MarkerAngle));
		vec2 viewVec = vec2(cos(ViewAngle), sin(ViewAngle));
		
		float angle = acos(dot(markerVec, viewVec));
		
		float compassAngle = 3.141593*CompassRange;
		float edgeDisplayAngle = 3.141593*EdgeDisplayRange;
		float fadeOutAngle = edgeDisplayAngle - compassAngle;
		
		float outOfViewAngle = angle - compassAngle;
		outOfViewAngle = clamp(outOfViewAngle, 0.0, fadeOutAngle);
		
		if(outOfViewAngle > 0.0) {
			n_out2p0 = (1.0 - (outOfViewAngle / fadeOutAngle)) * 0.5;
		} else {
			n_out2p0 = 1.0;
		}
		
		
	}

// ScalarOp:5
	float n_out5p0 = n_out4p1 * n_out2p0;

// Output:0
	COLOR.rgb = n_out4p0;
	COLOR.a = n_out5p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -1003.48, 178 )
mode = 1
flags/light_only = false
nodes/vertex/0/position = Vector2( 2000, 200 )
nodes/vertex/2/node = SubResource( 14 )
nodes/vertex/2/position = Vector2( 1560, 120 )
nodes/vertex/3/node = SubResource( 24 )
nodes/vertex/3/position = Vector2( 1780, 140 )
nodes/vertex/4/node = SubResource( 33 )
nodes/vertex/4/position = Vector2( 1560, 220 )
nodes/vertex/5/node = SubResource( 35 )
nodes/vertex/5/position = Vector2( -900, -20 )
nodes/vertex/6/node = SubResource( 36 )
nodes/vertex/6/position = Vector2( -900, 260 )
nodes/vertex/8/node = SubResource( 37 )
nodes/vertex/8/position = Vector2( -660, 40 )
nodes/vertex/9/node = SubResource( 38 )
nodes/vertex/9/position = Vector2( -660, 120 )
nodes/vertex/10/node = SubResource( 4 )
nodes/vertex/10/position = Vector2( -260, 80 )
nodes/vertex/11/node = SubResource( 5 )
nodes/vertex/11/position = Vector2( -660, 220 )
nodes/vertex/12/node = SubResource( 6 )
nodes/vertex/12/position = Vector2( -660, 300 )
nodes/vertex/13/node = SubResource( 7 )
nodes/vertex/13/position = Vector2( -260, 260 )
nodes/vertex/14/node = SubResource( 8 )
nodes/vertex/14/position = Vector2( -40, 160 )
nodes/vertex/15/node = SubResource( 9 )
nodes/vertex/15/position = Vector2( 920, 0 )
nodes/vertex/16/node = SubResource( 10 )
nodes/vertex/16/position = Vector2( -660, -140 )
nodes/vertex/17/node = SubResource( 11 )
nodes/vertex/17/position = Vector2( -660, -60 )
nodes/vertex/18/node = SubResource( 12 )
nodes/vertex/18/position = Vector2( -260, -100 )
nodes/vertex/19/node = SubResource( 13 )
nodes/vertex/19/position = Vector2( -460, -180 )
nodes/vertex/20/node = SubResource( 15 )
nodes/vertex/20/position = Vector2( -40, -20 )
nodes/vertex/21/node = SubResource( 16 )
nodes/vertex/21/position = Vector2( 140, -20 )
nodes/vertex/22/node = SubResource( 17 )
nodes/vertex/22/position = Vector2( 140, 160 )
nodes/vertex/23/node = SubResource( 18 )
nodes/vertex/23/position = Vector2( 340, 160 )
nodes/vertex/25/node = SubResource( 19 )
nodes/vertex/25/position = Vector2( 140, 300 )
nodes/vertex/26/node = SubResource( 20 )
nodes/vertex/26/position = Vector2( 720, 0 )
nodes/vertex/27/node = SubResource( 21 )
nodes/vertex/27/position = Vector2( 540, 140 )
nodes/vertex/28/node = SubResource( 22 )
nodes/vertex/28/position = Vector2( 340, 320 )
nodes/vertex/29/node = SubResource( 23 )
nodes/vertex/29/position = Vector2( 780, 360 )
nodes/vertex/30/node = SubResource( 25 )
nodes/vertex/30/position = Vector2( 340, 440 )
nodes/vertex/31/node = SubResource( 26 )
nodes/vertex/31/position = Vector2( 140, 440 )
nodes/vertex/32/node = SubResource( 27 )
nodes/vertex/32/position = Vector2( 560, 320 )
nodes/vertex/35/node = SubResource( 28 )
nodes/vertex/35/position = Vector2( -280, 480 )
nodes/vertex/36/node = SubResource( 29 )
nodes/vertex/36/position = Vector2( -260, 400 )
nodes/vertex/37/node = SubResource( 30 )
nodes/vertex/37/position = Vector2( 1140, 260 )
nodes/vertex/38/node = SubResource( 31 )
nodes/vertex/38/position = Vector2( 1340, 180 )
nodes/vertex/39/node = SubResource( 32 )
nodes/vertex/39/position = Vector2( 960, 260 )
nodes/vertex/40/node = SubResource( 34 )
nodes/vertex/40/position = Vector2( -260, 560 )
nodes/vertex/connections = PoolIntArray( 2, 0, 3, 0, 3, 0, 0, 0, 4, 0, 3, 1, 5, 0, 8, 0, 5, 0, 9, 0, 8, 0, 10, 0, 9, 0, 10, 1, 11, 0, 13, 0, 12, 0, 13, 1, 6, 0, 11, 0, 6, 0, 12, 0, 10, 0, 14, 0, 13, 0, 14, 1, 17, 0, 18, 1, 5, 0, 16, 0, 5, 0, 17, 0, 16, 0, 19, 0, 19, 0, 18, 0, 18, 0, 20, 0, 13, 0, 20, 1, 20, 0, 21, 0, 14, 0, 22, 0, 22, 0, 23, 0, 25, 0, 23, 1, 21, 0, 26, 0, 26, 0, 15, 0, 23, 0, 27, 0, 27, 0, 26, 1, 22, 0, 28, 0, 25, 0, 28, 1, 31, 0, 30, 0, 25, 0, 30, 1, 30, 0, 29, 1, 28, 0, 32, 0, 32, 0, 29, 0, 30, 0, 32, 2, 35, 0, 25, 1, 36, 0, 25, 0, 36, 0, 31, 0, 15, 0, 38, 0, 37, 0, 38, 1, 38, 0, 4, 0, 21, 0, 39, 0, 29, 0, 39, 1, 39, 0, 37, 0, 40, 0, 31, 1 )
nodes/fragment/0/position = Vector2( 460, 40 )
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( -460, 40 )
nodes/fragment/2/size = Vector2( 587, 415 )
nodes/fragment/2/input_ports = ""
nodes/fragment/2/output_ports = "0,0,output0;"
nodes/fragment/2/expression = "vec2 markerVec = vec2(cos(MarkerAngle), sin(MarkerAngle));
vec2 viewVec = vec2(cos(ViewAngle), sin(ViewAngle));

float angle = acos(dot(markerVec, viewVec));

float compassAngle = 3.141593*CompassRange;
float edgeDisplayAngle = 3.141593*EdgeDisplayRange;
float fadeOutAngle = edgeDisplayAngle - compassAngle;

float outOfViewAngle = angle - compassAngle;
outOfViewAngle = clamp(outOfViewAngle, 0.0, fadeOutAngle);

if(outOfViewAngle > 0.0) {
	output0 = (1.0 - (outOfViewAngle / fadeOutAngle)) * 0.5;
} else {
	output0 = 1.0;
}

"
nodes/fragment/4/node = SubResource( 2 )
nodes/fragment/4/position = Vector2( -40, -260 )
nodes/fragment/5/node = SubResource( 3 )
nodes/fragment/5/position = Vector2( 240, 40 )
nodes/fragment/connections = PoolIntArray( 4, 0, 0, 0, 2, 0, 5, 1, 4, 1, 5, 0, 5, 0, 0, 1 )
