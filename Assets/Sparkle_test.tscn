[gd_scene load_steps=11 format=2]

[ext_resource path="res://Texture/Sparkle/sparkle_gradient.png" type="Texture" id=1]

[sub_resource type="VisualShaderNodeTexture" id=1]
texture = ExtResource( 1 )

[sub_resource type="Gradient" id=2]
offsets = PoolRealArray( 0, 0.693151, 0.758904, 0.80274, 0.843836, 0.917808, 0.928767, 1 )
colors = PoolColorArray( 0.494118, 0.458824, 0.431373, 0, 0.644531, 1, 0.983337, 0.782248, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.201652, 1, 1, 0.109375, 0.144165, 1, 1, 0.601563, 1, 0.962646, 1, 0.703125, 1, 0.951294, 1 )

[sub_resource type="GradientTexture" id=3]
gradient = SubResource( 2 )

[sub_resource type="VisualShaderNodeTexture" id=4]
texture = SubResource( 3 )
texture_type = 1

[sub_resource type="VisualShaderNodeExpression" id=5]
size = Vector2( 656, 357 )
expression = "mat4 mat_world = mat4(normalize(CAMERA_MATRIX[0])*length(WORLD_MATRIX[0]),normalize(CAMERA_MATRIX[1])*length(WORLD_MATRIX[0]),normalize(CAMERA_MATRIX[2])*length(WORLD_MATRIX[2]),WORLD_MATRIX[3]);
mat_world = mat_world * mat4( vec4(cos(INSTANCE_CUSTOM.x),-sin(INSTANCE_CUSTOM.x), 0.0, 0.0), vec4(sin(INSTANCE_CUSTOM.x), cos(INSTANCE_CUSTOM.x), 0.0, 0.0),vec4(0.0, 0.0, 1.0, 0.0),vec4(0.0, 0.0, 0.0, 1.0));
MODELVIEW_MATRIX = INV_CAMERA_MATRIX * mat_world;"

[sub_resource type="VisualShader" id=6]
code = "shader_type spatial;
render_mode cull_disabled, specular_schlick_ggx, depth_test_disable, unshaded, shadows_disabled, ambient_light_disabled;

uniform sampler2D tex_frg_2;
uniform sampler2D tex_frg_3 : hint_albedo;



void vertex() {
// Expression:2
	vec3 n_out2p0;
	n_out2p0 = vec3(0.0, 0.0, 0.0);
	{
		mat4 mat_world = mat4(normalize(CAMERA_MATRIX[0])*length(WORLD_MATRIX[0]),normalize(CAMERA_MATRIX[1])*length(WORLD_MATRIX[0]),normalize(CAMERA_MATRIX[2])*length(WORLD_MATRIX[2]),WORLD_MATRIX[3]);
		mat_world = mat_world * mat4( vec4(cos(INSTANCE_CUSTOM.x),-sin(INSTANCE_CUSTOM.x), 0.0, 0.0), vec4(sin(INSTANCE_CUSTOM.x), cos(INSTANCE_CUSTOM.x), 0.0, 0.0),vec4(0.0, 0.0, 1.0, 0.0),vec4(0.0, 0.0, 0.0, 1.0));
		MODELVIEW_MATRIX = INV_CAMERA_MATRIX * mat_world;
	}

// Output:0
	UV2 = n_out2p0.xy;

}

void fragment() {
// Texture:2
	vec4 tex_frg_2_read = texture(tex_frg_2, UV.xy);
	vec3 n_out2p0 = tex_frg_2_read.rgb;
	float n_out2p1 = tex_frg_2_read.a;

// Texture:3
	vec4 tex_frg_3_read = texture(tex_frg_3, vec3(n_out2p1).xy);
	vec3 n_out3p0 = tex_frg_3_read.rgb;
	float n_out3p1 = tex_frg_3_read.a;

// Output:0
	ALBEDO = n_out3p0;
	ALPHA = n_out3p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -531, 84 )
modes/cull = 2
flags/ambient_light_disabled = true
flags/depth_test_disable = true
flags/shadows_disabled = true
flags/unshaded = true
nodes/vertex/0/position = Vector2( 280, 260 )
nodes/vertex/2/node = SubResource( 5 )
nodes/vertex/2/position = Vector2( -480, 200 )
nodes/vertex/2/size = Vector2( 656, 357 )
nodes/vertex/2/input_ports = ""
nodes/vertex/2/output_ports = "0,1,output0;"
nodes/vertex/2/expression = "mat4 mat_world = mat4(normalize(CAMERA_MATRIX[0])*length(WORLD_MATRIX[0]),normalize(CAMERA_MATRIX[1])*length(WORLD_MATRIX[0]),normalize(CAMERA_MATRIX[2])*length(WORLD_MATRIX[2]),WORLD_MATRIX[3]);
mat_world = mat_world * mat4( vec4(cos(INSTANCE_CUSTOM.x),-sin(INSTANCE_CUSTOM.x), 0.0, 0.0), vec4(sin(INSTANCE_CUSTOM.x), cos(INSTANCE_CUSTOM.x), 0.0, 0.0),vec4(0.0, 0.0, 1.0, 0.0),vec4(0.0, 0.0, 0.0, 1.0));
MODELVIEW_MATRIX = INV_CAMERA_MATRIX * mat_world;"
nodes/vertex/connections = PoolIntArray( 2, 0, 0, 5 )
nodes/fragment/0/position = Vector2( 340, 380 )
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( -380, 340 )
nodes/fragment/3/node = SubResource( 4 )
nodes/fragment/3/position = Vector2( -60, 320 )
nodes/fragment/connections = PoolIntArray( 2, 1, 3, 0, 3, 0, 0, 0, 3, 1, 0, 1 )

[sub_resource type="ShaderMaterial" id=7]
shader = SubResource( 6 )

[sub_resource type="QuadMesh" id=8]

[sub_resource type="Curve" id=9]
_data = [ Vector2( 0, 0 ), 0.0, -0.0183816, 0, 0, Vector2( 0.277174, 1 ), 3.2897, -2.8565, 0, 0, Vector2( 1, 0 ), 0.0, 0.0, 0, 0 ]

[node name="Spatial" type="Spatial"]

[node name="Sparkle" type="CPUParticles" parent="."]
material_override = SubResource( 7 )
cast_shadow = 0
emitting = false
amount = 1
lifetime = 0.3
one_shot = true
mesh = SubResource( 8 )
gravity = Vector3( 0, 0, 0 )
angle = 45.5
angle_random = 1.0
scale_amount_curve = SubResource( 9 )
