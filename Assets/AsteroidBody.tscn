[gd_scene load_steps=42 format=2]

[ext_resource path="res://Scripts/AsteroidBody.gd" type="Script" id=1]
[ext_resource path="res://Texture/Cut/cut.png" type="Texture" id=2]
[ext_resource path="res://Texture/Bloom/bloom_ellipse.png" type="Texture" id=3]
[ext_resource path="res://Assets/cut.tscn" type="PackedScene" id=4]

[sub_resource type="BoxShape" id=1]

[sub_resource type="VisualShaderNodeVectorOp" id=2]

[sub_resource type="VisualShaderNodeVectorCompose" id=3]
default_input_values = [ 0, 1.0, 1, 1.0, 2, 1.0 ]

[sub_resource type="VisualShaderNodeScalarOp" id=4]
default_input_values = [ 0, 0.0, 1, -0.5 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=5]
default_input_values = [ 0, 0.0, 1, -1.0 ]

[sub_resource type="VisualShaderNodeScalarOp" id=6]
default_input_values = [ 0, 0.0, 1, 1.8 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=7]
default_input_values = [ 0, 1.0, 1, 0.0 ]
operator = 1

[sub_resource type="VisualShaderNodeScalarFunc" id=8]
function = 12

[sub_resource type="VisualShaderNodeScalarOp" id=9]
default_input_values = [ 0, 0.0, 1, 1.8 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=10]

[sub_resource type="VisualShaderNodeTexture" id=11]
texture = ExtResource( 2 )

[sub_resource type="VisualShaderNodeScalarUniform" id=12]
uniform_name = "Drift"

[sub_resource type="Gradient" id=13]
offsets = PoolRealArray( 0, 0.252055, 0.309589, 0.358904, 0.405479 )
colors = PoolColorArray( 0.141176, 0.141176, 0.141176, 0, 0.640625, 0.640625, 0.640625, 0.372549, 0.682353, 0.682353, 0.682353, 0.945098, 0.980469, 0.760545, 0.417465, 0.690196, 1, 0.777832, 0.644531, 1 )

[sub_resource type="GradientTexture" id=14]
gradient = SubResource( 13 )

[sub_resource type="VisualShaderNodeTexture" id=15]
texture = SubResource( 14 )

[sub_resource type="VisualShaderNodeSwitch" id=16]

[sub_resource type="VisualShaderNodeBooleanUniform" id=17]
uniform_name = "ShadowMode"

[sub_resource type="VisualShaderNodeScalarSwitch" id=18]

[sub_resource type="Gradient" id=19]
offsets = PoolRealArray( 0, 0.164384, 0.232877, 0.452055 )
colors = PoolColorArray( 0, 0, 0, 0, 1, 0.421875, 0, 0.345098, 1, 0.984314, 0.0117647, 0.843137, 1, 1, 1, 1 )

[sub_resource type="GradientTexture" id=20]
gradient = SubResource( 19 )

[sub_resource type="VisualShaderNodeTexture" id=21]
texture = SubResource( 20 )

[sub_resource type="VisualShaderNodeInput" id=22]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorOp" id=23]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 2, 0, 0 ) ]
operator = 2

[sub_resource type="VisualShaderNodeVectorCompose" id=24]

[sub_resource type="VisualShaderNodeScalarUniform" id=25]
uniform_name = "Time"

[sub_resource type="VisualShaderNodeExpression" id=26]
size = Vector2( 318, 165 )
expression = "MODELVIEW_MATRIX = INV_CAMERA_MATRIX * mat4(CAMERA_MATRIX[0],CAMERA_MATRIX[1],CAMERA_MATRIX[2],WORLD_MATRIX[3]);
MODELVIEW_MATRIX = MODELVIEW_MATRIX * mat4(vec4(length(WORLD_MATRIX[0].xyz), 0.0, 0.0, 0.0),vec4(0.0, length(WORLD_MATRIX[1].xyz), 0.0, 0.0),vec4(0.0, 0.0, length(WORLD_MATRIX[2].xyz), 0.0),vec4(0.0, 0.0, 0.0, 1.0));"

[sub_resource type="VisualShader" id=27]
code = "shader_type spatial;
render_mode specular_schlick_ggx, unshaded;

uniform bool ShadowMode;
uniform float Time;
uniform float Drift;
uniform sampler2D tex_frg_2;
uniform sampler2D tex_frg_21;
uniform sampler2D tex_frg_3;



void vertex() {
// Expression:2
	vec3 n_out2p0;
	n_out2p0 = vec3(0.0, 0.0, 0.0);
	{
		MODELVIEW_MATRIX = INV_CAMERA_MATRIX * mat4(CAMERA_MATRIX[0],CAMERA_MATRIX[1],CAMERA_MATRIX[2],WORLD_MATRIX[3]);
		MODELVIEW_MATRIX = MODELVIEW_MATRIX * mat4(vec4(length(WORLD_MATRIX[0].xyz), 0.0, 0.0, 0.0),vec4(0.0, length(WORLD_MATRIX[1].xyz), 0.0, 0.0),vec4(0.0, 0.0, length(WORLD_MATRIX[2].xyz), 0.0),vec4(0.0, 0.0, 0.0, 1.0));
	}

// Output:0
	UV2 = n_out2p0.xy;

}

void fragment() {
// BooleanUniform:23
	bool n_out23p0 = ShadowMode;

// Input:4
	vec3 n_out4p0 = vec3(UV, 0.0);

// ScalarUniform:7
	float n_out7p0 = Time;

// VectorCompose:11
	float n_in11p1 = 1.00000;
	float n_in11p2 = 1.00000;
	vec3 n_out11p0 = vec3(n_out7p0, n_in11p1, n_in11p2);

// VectorOp:5
	vec3 n_out5p0 = n_out4p0 * n_out11p0;

// ScalarOp:13
	float n_in13p1 = -1.00000;
	float n_out13p0 = n_out7p0 + n_in13p1;

// ScalarOp:12
	float n_in12p1 = -0.50000;
	float n_out12p0 = n_out13p0 * n_in12p1;

// ScalarUniform:20
	float n_out20p0 = Drift;

// ScalarOp:19
	float n_out19p0 = n_out12p0 + n_out20p0;

// VectorCompose:6
	float n_in6p1 = 0.00000;
	float n_in6p2 = 0.00000;
	vec3 n_out6p0 = vec3(n_out19p0, n_in6p1, n_in6p2);

// VectorOp:10
	vec3 n_out10p0 = n_out5p0 + n_out6p0;

// Texture:2
	vec4 tex_frg_2_read = texture(tex_frg_2, n_out10p0.xy);
	vec3 n_out2p0 = tex_frg_2_read.rgb;
	float n_out2p1 = tex_frg_2_read.a;

// ScalarFunc:17
	float n_out17p0 = abs(n_out7p0);

// ScalarOp:16
	float n_in16p0 = 1.00000;
	float n_out16p0 = n_in16p0 - n_out17p0;

// ScalarOp:15
	float n_in15p1 = 1.80000;
	float n_out15p0 = n_out16p0 * n_in15p1;

// ScalarOp:18
	float n_out18p0 = n_out2p1 * n_out15p0;

// Texture:21
	vec4 tex_frg_21_read = texture(tex_frg_21, vec3(n_out18p0).xy);
	vec3 n_out21p0 = tex_frg_21_read.rgb;
	float n_out21p1 = tex_frg_21_read.a;

// Texture:3
	vec4 tex_frg_3_read = texture(tex_frg_3, vec3(n_out18p0).xy);
	vec3 n_out3p0 = tex_frg_3_read.rgb;
	float n_out3p1 = tex_frg_3_read.a;

// VectorSwitch:22
	vec3 n_out22p0;
	if(n_out23p0)
	{
		n_out22p0 = n_out21p0;
	}
	else
	{
		n_out22p0 = n_out3p0;
	}

// ScalarSwitch:24
	float n_out24p0;
	if(n_out23p0)
	{
		n_out24p0 = n_out21p1;
	}
	else
	{
		n_out24p0 = n_out3p1;
	}

// Output:0
	ALBEDO = n_out22p0;
	ALPHA = n_out24p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -331, 64.5 )
flags/unshaded = true
nodes/vertex/2/node = SubResource( 26 )
nodes/vertex/2/position = Vector2( -140, 160 )
nodes/vertex/2/size = Vector2( 318, 165 )
nodes/vertex/2/input_ports = ""
nodes/vertex/2/output_ports = "0,1,output0;"
nodes/vertex/2/expression = "MODELVIEW_MATRIX = INV_CAMERA_MATRIX * mat4(CAMERA_MATRIX[0],CAMERA_MATRIX[1],CAMERA_MATRIX[2],WORLD_MATRIX[3]);
MODELVIEW_MATRIX = MODELVIEW_MATRIX * mat4(vec4(length(WORLD_MATRIX[0].xyz), 0.0, 0.0, 0.0),vec4(0.0, length(WORLD_MATRIX[1].xyz), 0.0, 0.0),vec4(0.0, 0.0, length(WORLD_MATRIX[2].xyz), 0.0),vec4(0.0, 0.0, 0.0, 1.0));"
nodes/vertex/connections = PoolIntArray( 2, 0, 0, 5 )
nodes/fragment/0/position = Vector2( 940, 40 )
nodes/fragment/2/node = SubResource( 11 )
nodes/fragment/2/position = Vector2( -120, 200 )
nodes/fragment/3/node = SubResource( 21 )
nodes/fragment/3/position = Vector2( 420, 180 )
nodes/fragment/4/node = SubResource( 22 )
nodes/fragment/4/position = Vector2( -1480, 100 )
nodes/fragment/5/node = SubResource( 23 )
nodes/fragment/5/position = Vector2( -600, 100 )
nodes/fragment/6/node = SubResource( 24 )
nodes/fragment/6/position = Vector2( -640, 360 )
nodes/fragment/7/node = SubResource( 25 )
nodes/fragment/7/position = Vector2( -1480, 340 )
nodes/fragment/10/node = SubResource( 2 )
nodes/fragment/10/position = Vector2( -360, 220 )
nodes/fragment/11/node = SubResource( 3 )
nodes/fragment/11/position = Vector2( -820, 220 )
nodes/fragment/12/node = SubResource( 4 )
nodes/fragment/12/position = Vector2( -1020, 360 )
nodes/fragment/13/node = SubResource( 5 )
nodes/fragment/13/position = Vector2( -1200, 360 )
nodes/fragment/15/node = SubResource( 6 )
nodes/fragment/15/position = Vector2( -800, 560 )
nodes/fragment/16/node = SubResource( 7 )
nodes/fragment/16/position = Vector2( -1000, 560 )
nodes/fragment/17/node = SubResource( 8 )
nodes/fragment/17/position = Vector2( -1200, 580 )
nodes/fragment/18/node = SubResource( 9 )
nodes/fragment/18/position = Vector2( 180, 300 )
nodes/fragment/19/node = SubResource( 10 )
nodes/fragment/19/position = Vector2( -840, 360 )
nodes/fragment/20/node = SubResource( 12 )
nodes/fragment/20/position = Vector2( -1040, 480 )
nodes/fragment/21/node = SubResource( 15 )
nodes/fragment/21/position = Vector2( 420, -40 )
nodes/fragment/22/node = SubResource( 16 )
nodes/fragment/22/position = Vector2( 640, 0 )
nodes/fragment/23/node = SubResource( 17 )
nodes/fragment/23/position = Vector2( 400, -120 )
nodes/fragment/24/node = SubResource( 18 )
nodes/fragment/24/position = Vector2( 660, 160 )
nodes/fragment/connections = PoolIntArray( 4, 0, 5, 0, 5, 0, 10, 0, 10, 0, 2, 0, 7, 0, 11, 0, 11, 0, 5, 1, 7, 0, 13, 0, 13, 0, 12, 0, 6, 0, 10, 1, 17, 0, 16, 1, 16, 0, 15, 0, 7, 0, 17, 0, 2, 1, 18, 0, 18, 0, 3, 0, 15, 0, 18, 1, 12, 0, 19, 0, 19, 0, 6, 0, 20, 0, 19, 1, 18, 0, 21, 0, 3, 0, 22, 2, 21, 0, 22, 1, 22, 0, 0, 0, 23, 0, 22, 0, 3, 1, 24, 2, 21, 1, 24, 1, 24, 0, 0, 1, 23, 0, 24, 0 )

[sub_resource type="ShaderMaterial" id=28]
resource_local_to_scene = true
shader = SubResource( 27 )
shader_param/ShadowMode = false
shader_param/Time = -1.0
shader_param/Drift = 0.0

[sub_resource type="VisualShaderNodeTexture" id=29]
texture = ExtResource( 3 )

[sub_resource type="VisualShaderNodeScalarOp" id=30]
operator = 2

[sub_resource type="Gradient" id=31]
offsets = PoolRealArray( 0, 0.635616, 0.838356 )
colors = PoolColorArray( 0, 0, 0, 0, 0.976471, 1, 0.211765, 0.231373, 1, 0.935631, 0.25098, 0.376471 )

[sub_resource type="GradientTexture" id=32]
gradient = SubResource( 31 )

[sub_resource type="VisualShaderNodeTexture" id=33]
texture = SubResource( 32 )

[sub_resource type="VisualShaderNodeScalarUniform" id=34]
uniform_name = "Strength"

[sub_resource type="VisualShaderNodeExpression" id=35]
size = Vector2( 250, 150 )
expression = "MODELVIEW_MATRIX = INV_CAMERA_MATRIX * mat4(CAMERA_MATRIX[0],CAMERA_MATRIX[1],CAMERA_MATRIX[2],WORLD_MATRIX[3]);
MODELVIEW_MATRIX = MODELVIEW_MATRIX * mat4(vec4(length(WORLD_MATRIX[0].xyz), 0.0, 0.0, 0.0),vec4(0.0, length(WORLD_MATRIX[1].xyz), 0.0, 0.0),vec4(0.0, 0.0, length(WORLD_MATRIX[2].xyz), 0.0),vec4(0.0, 0.0, 0.0, 1.0));"

[sub_resource type="VisualShader" id=36]
code = "shader_type spatial;
render_mode blend_add, specular_schlick_ggx, unshaded;

uniform sampler2D tex_frg_2;
uniform float Strength;
uniform sampler2D tex_frg_5;



void vertex() {
// Expression:2
	vec3 n_out2p0;
	n_out2p0 = vec3(0.0, 0.0, 0.0);
	{
		MODELVIEW_MATRIX = INV_CAMERA_MATRIX * mat4(CAMERA_MATRIX[0],CAMERA_MATRIX[1],CAMERA_MATRIX[2],WORLD_MATRIX[3]);
		MODELVIEW_MATRIX = MODELVIEW_MATRIX * mat4(vec4(length(WORLD_MATRIX[0].xyz), 0.0, 0.0, 0.0),vec4(0.0, length(WORLD_MATRIX[1].xyz), 0.0, 0.0),vec4(0.0, 0.0, length(WORLD_MATRIX[2].xyz), 0.0),vec4(0.0, 0.0, 0.0, 1.0));
	}

// Output:0
	UV2 = n_out2p0.xy;

}

void fragment() {
// Texture:2
	vec4 tex_frg_2_read = texture(tex_frg_2, UV.xy);
	vec3 n_out2p0 = tex_frg_2_read.rgb;
	float n_out2p1 = tex_frg_2_read.a;

// ScalarUniform:6
	float n_out6p0 = Strength;

// ScalarOp:3
	float n_out3p0 = n_out2p1 * n_out6p0;

// Texture:5
	vec4 tex_frg_5_read = texture(tex_frg_5, vec3(n_out3p0).xy);
	vec3 n_out5p0 = tex_frg_5_read.rgb;
	float n_out5p1 = tex_frg_5_read.a;

// Output:0
	ALBEDO = n_out5p0;
	ALPHA = n_out5p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -331, 64.5 )
modes/blend = 1
flags/unshaded = true
nodes/vertex/2/node = SubResource( 35 )
nodes/vertex/2/position = Vector2( 20, 220 )
nodes/vertex/2/size = Vector2( 250, 150 )
nodes/vertex/2/input_ports = ""
nodes/vertex/2/output_ports = "0,1,output0;"
nodes/vertex/2/expression = "MODELVIEW_MATRIX = INV_CAMERA_MATRIX * mat4(CAMERA_MATRIX[0],CAMERA_MATRIX[1],CAMERA_MATRIX[2],WORLD_MATRIX[3]);
MODELVIEW_MATRIX = MODELVIEW_MATRIX * mat4(vec4(length(WORLD_MATRIX[0].xyz), 0.0, 0.0, 0.0),vec4(0.0, length(WORLD_MATRIX[1].xyz), 0.0, 0.0),vec4(0.0, 0.0, length(WORLD_MATRIX[2].xyz), 0.0),vec4(0.0, 0.0, 0.0, 1.0));"
nodes/vertex/connections = PoolIntArray( 2, 0, 0, 5 )
nodes/fragment/2/node = SubResource( 29 )
nodes/fragment/2/position = Vector2( -400, 260 )
nodes/fragment/3/node = SubResource( 30 )
nodes/fragment/3/position = Vector2( -120, 280 )
nodes/fragment/5/node = SubResource( 33 )
nodes/fragment/5/position = Vector2( 80, 220 )
nodes/fragment/6/node = SubResource( 34 )
nodes/fragment/6/position = Vector2( -400, 540 )
nodes/fragment/connections = PoolIntArray( 2, 1, 3, 0, 3, 0, 5, 0, 5, 0, 0, 0, 5, 1, 0, 1, 6, 0, 3, 1 )

[sub_resource type="ShaderMaterial" id=37]
resource_local_to_scene = true
shader = SubResource( 36 )
shader_param/Strength = 0.0

[node name="AsteroidBody" type="KinematicBody" groups=[
"asteroids",
]]
collision_layer = 2147483649
collision_mask = 2
script = ExtResource( 1 )

[node name="Hitbox" type="CollisionShape" parent="."]
shape = SubResource( 1 )

[node name="cut" parent="." instance=ExtResource( 4 )]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, -1.6205 )

[node name="CutPlane" parent="cut" index="1"]
material/0 = SubResource( 28 )

[node name="GlowPlane" parent="cut" index="2"]
material/0 = SubResource( 37 )
[connection signal="animation_finished" from="cut/AnimationPlayer" to="." method="destroy"]

[editable path="cut"]
